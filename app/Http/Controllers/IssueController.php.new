<?php

namespace App\Http\Controllers;

use App\Services\IssueService;
use App\Services\TenantAuthService;
use App\Services\BookingService;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;

class IssueController extends Controller
{
    protected $issueService;
    protected $authService;
    protected $bookingService;

    public function __construct(
        IssueService $issueService, 
        TenantAuthService $authService,
        BookingService $bookingService
    ) {
        $this->issueService = $issueService;
        $this->authService = $authService;
        $this->bookingService = $bookingService;
        $this->middleware('tenant.auth');
    }

    /**
     * Display a listing of reported issues
     */
    public function index()
    {
        $tenant = $this->authService->getTenantData();
        
        if (!$tenant) {
            return redirect()->route('login')
                ->with('error', 'Your session has expired. Please login again.');
        }
        
        // Fetch active bookings for the tenant
        $bookingsResponse = $this->bookingService->getTenantBookings(
            $tenant['tenant_id'], 
            ['status' => 'approved']
        );
        
        $bookings = $bookingsResponse['success'] 
            ? $bookingsResponse['body']['bookings'] 
            : [];
        
        // Fetch reported issues
        $issuesResponse = $this->issueService->getTenantIssues(
            $tenant['tenant_id']
        );
        
        $issues = $issuesResponse['success'] 
            ? $issuesResponse['body']['issues'] 
            : [];
        
        return view('tenant.issues', [
            'tenant' => $tenant,
            'bookings' => $bookings,
            'issues' => $issues
        ]);
    }

    /**
     * Store a newly created issue report
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'booking_id' => 'required|numeric',
            'description' => 'required|string|min:10|max:500',
        ]);

        if ($validator->fails()) {
            return back()->withErrors($validator)->withInput();
        }
        
        $tenant = $this->authService->getTenantData();
        
        if (!$tenant) {
            return redirect()->route('login')
                ->with('error', 'Your session has expired. Please login again.');
        }
        
        $response = $this->issueService->reportIssue(
            $request->booking_id,
            $tenant['user_id'],
            $request->description
        );
        
        if (!$response['success']) {
            return back()->with('error', $response['body']['message'] ?? 'Failed to report issue.');
        }
        
        return redirect()->route('tenant.issues')
            ->with('status', 'Issue reported successfully.');
    }

    /**
     * Display the specified issue
     */
    public function show($issueId)
    {
        $tenant = $this->authService->getTenantData();
        
        if (!$tenant) {
            return redirect()->route('login')
                ->with('error', 'Your session has expired. Please login again.');
        }
        
        $response = $this->issueService->getIssue($issueId);
        
        if (!$response['success']) {
            return back()->with('error', $response['body']['message'] ?? 'Issue not found.');
        }
        
        return view('tenant.issue-detail', [
            'issue' => $response['body']['issue'],
            'tenant' => $tenant
        ]);
    }
}
