import React, { useState, useEffect } from 'react';
import {
  Box,
  Container,
  Heading,
  Text,
  Stack,
  SimpleGrid,
  Flex,
  Badge,
  Button,
  Divider,
  VStack,
  HStack,
  FormControl,
  FormLabel,
  Input,
  Textarea,
  Select,
  Icon,
  List,
  ListItem,
  ListIcon,
  Alert,
  AlertIcon,
  AlertTitle,
  AlertDescription,
  Spinner,
  useColorModeValue,
  useToast,
} from '@chakra-ui/react';
import { FaBed, FaFemale, FaMale, FaCrown, FaUsers, FaWifi, FaToilet, FaAirFreshener, 
         FaCheckCircle, FaCalendarAlt, FaArrowLeft, FaTshirt, FaDesktop } from 'react-icons/fa';
import Navbar from './components/Navbar.jsx';
import Footer from './components/Footer.jsx';
import { roomApi } from './api.js';

export default function RoomDetailPage({ initialData = null, skipNavbar = false }) {
  const [room, setRoom] = useState(initialData?.room || null);
  const [roomId, setRoomId] = useState(initialData?.room?.roomId || null);
  const [loading, setLoading] = useState(!initialData?.room);
  const [error, setError] = useState(null);
  const toast = useToast();
  
  // Booking form state
  const [checkIn, setCheckIn] = useState('');
  const [checkOut, setCheckOut] = useState('');
  const [guests, setGuests] = useState(1);
  const [notes, setNotes] = useState('');
  const [duration, setDuration] = useState(0);
  const [totalPrice, setTotalPrice] = useState(0);
  const [submitting, setSubmitting] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState(initialData?.isAuthenticated || false);
  
  // Check authentication status when component mounts
  useEffect(() => {
    // Check for authentication from multiple sources
    const token = localStorage.getItem('tenant_token') || 
                  sessionStorage.getItem('tenant_token') || 
                  (window.appConfig && window.appConfig.authToken);
    
    const tenantData = localStorage.getItem('tenant_data') || 
                       sessionStorage.getItem('tenant_data') ||
                       (window.appConfig && window.appConfig.tenant);
                       
    console.log('RoomDetailPage: Checking auth status...', { 
      hasToken: !!token, 
      hasTenantData: !!tenantData
    });
    
    setIsAuthenticated(!!token && !!tenantData);
  }, []);
  
  // Get room ID from URL if not provided in initialData
  useEffect(() => {
    if (!roomId) {
      const pathParts = window.location.pathname.split('/');
      const idFromUrl = pathParts[pathParts.length - 1];
      if (idFromUrl && !isNaN(parseInt(idFromUrl))) {
        setRoomId(parseInt(idFromUrl));
      }
    }
  }, [roomId]);

  // Fetch room details when roomId changes
  useEffect(() => {
    // If we have initial data or no roomId yet, skip fetching
    if (initialData?.room || !roomId) {
      return;
    }

    const fetchRoomDetails = async () => {
      try {
        setLoading(true);
        const response = await roomApi.getRoomById(roomId);
        
        if (response.success && response.data && response.data.room) {
          setRoom(response.data.room);
          console.log('Room data loaded:', response.data.room);
          // Set initial guests value based on room capacity
          if (response.data.room.capacity) {
            setGuests(1); // Default to 1 guest
          }
        } else {
          setError('Failed to load room details. Please try again later.');
        }
      } catch (err) {
        console.error('Error fetching room details:', err);
        setError('An error occurred while fetching room details.');
      } finally {
        setLoading(false);
      }
    };

    fetchRoomDetails();
  }, [roomId, initialData]);
  
  // Check if the room is for daily or monthly rental
  const isDaily = room?.rentalType?.name === 'harian';
  
  // Calculate total price when dates change
  useEffect(() => {
    if (checkIn && checkOut) {
      let start = new Date(checkIn);
      let end = new Date(checkOut);
      
      if (isDaily) {
        // For daily rental, calculate difference in days
        const timeDiff = end.getTime() - start.getTime();
        const days = Math.ceil(timeDiff / (1000 * 3600 * 24));
        
        if (days > 0) {
          setDuration(days);
          const price = room?.rate ? room.rate * days : 0;
          setTotalPrice(price);
        }
      } else {
        // For monthly rental, calculate difference in months
        const months = (end.getFullYear() - start.getFullYear()) * 12 + 
                      (end.getMonth() - start.getMonth());
        
        if (months > 0) {
          setDuration(months);
          const price = room?.rate ? room.rate * months : 0;
          setTotalPrice(price);
        }
      }
    }
  }, [checkIn, checkOut, room, isDaily]);
  
  // Get minimum dates for check-in and check-out
  const today = new Date();
  const tomorrow = new Date(today);
  tomorrow.setDate(tomorrow.getDate() + 1);
  
  const minCheckIn = tomorrow.toISOString().split('T')[0];
  
  // Handle check-in date change
  const handleCheckInChange = (e) => {
    const selectedDate = e.target.value;
    setCheckIn(selectedDate);
    
    // Make check-out date handling dependent on rental type
    if (isDaily) {
      // For daily rental, set check-out to next day if needed
      if (checkOut && new Date(selectedDate) >= new Date(checkOut)) {
        const nextDay = new Date(selectedDate);
        nextDay.setDate(nextDay.getDate() + 1);
        setCheckOut(nextDay.toISOString().split('T')[0]);
      }
    } else {
      // For monthly rental, set check-out to next month if needed
      if (checkOut && new Date(selectedDate) >= new Date(checkOut)) {
        const nextMonth = new Date(selectedDate);
        nextMonth.setMonth(nextMonth.getMonth() + 1);
        setCheckOut(nextMonth.toISOString().split('T')[0]);
      }
    }
  };
  
  // Get next date based on rental type
  const getNextDate = () => {
    if (!checkIn) return minCheckIn;
    
    const checkInDate = new Date(checkIn);
    
    if (isDaily) {
      // For daily rental, next day
      const nextDay = new Date(checkInDate);
      nextDay.setDate(nextDay.getDate() + 1);
      return nextDay.toISOString().split('T')[0];
    } else {
      // For monthly rental, next month
      const nextMonth = new Date(checkInDate);
      nextMonth.setMonth(nextMonth.getMonth() + 1);
      return nextMonth.toISOString().split('T')[0];
    }
  };
  
  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (!isAuthenticated) {
      // Redirect to login
      window.location.href = `/tenant/login?redirect=${window.location.pathname}`;
      return;
    }
    
    if (!checkIn || !checkOut) {
      toast({
        title: "Missing dates",
        description: `Please select both check-in and check-out ${isDaily ? 'dates' : 'months'}.`,
        status: "warning",
        duration: 5000,
        isClosable: true,
      });
      return;
    }
    
    // Create a form and submit it to server-side endpoint
    const form = document.createElement('form');
    form.method = 'POST';
    form.action = '/bookings';
    
    // Add form fields
    const addField = (name, value) => {
      const field = document.createElement('input');
      field.type = 'hidden';
      field.name = name;
      field.value = value;
      form.appendChild(field);
    };
    
    // Add CSRF token
    const token = document.head.querySelector('meta[name="csrf-token"]');
    if (token) {
      addField('_token', token.content);
    }
    
    addField('room_id', roomId);
    addField('check_in', checkIn);
    addField('check_out', checkOut);
    addField('guests', guests);
    addField('notes', notes);
    addField('rental_type', isDaily ? 'daily' : 'monthly');
    
    document.body.appendChild(form);
    form.submit();
  };
  
  // Function to get feature icon
  const getFeatureIcon = (featureName) => {
    switch(featureName) {
      case 'AC': return FaAirFreshener;
      case 'wifi': return FaWifi;
      case 'private_bathroom': return FaToilet;
      case 'shared_bathroom': return FaToilet;
      case 'desk': return FaDesktop;
      case 'wardrobe': return FaTshirt;
      case 'single_bed':
      case 'double_bed': return FaBed;
      default: return FaCheckCircle;
    }
  };
  
  // Function to get room type icon
  const getRoomIcon = () => {
    if (!room?.classification?.name) return FaBed;
    
    switch(room.classification.name) {
      case 'perempuan': return FaFemale;
      case 'laki_laki': return FaMale;
      case 'VIP': return FaCrown;
      case 'ruang_rapat': return FaUsers;
      default: return FaBed;
    }
  };
  
  // Function to get badge color
  const getBadgeColor = () => {
    if (!room?.classification?.name) return 'gray';
    
    switch(room.classification.name) {
      case 'perempuan': return 'pink';
      case 'laki_laki': return 'blue';
      case 'VIP': return 'yellow';
      case 'ruang_rapat': return 'green';
      default: return 'gray';
    }
  };
  
  // Function to get room type name
  const getRoomTypeName = () => {
    if (!room?.classification?.name) return 'Standard';
    
    switch(room.classification.name) {
      case 'perempuan': return 'Female Only';
      case 'laki_laki': return 'Male Only';
      case 'VIP': return 'VIP Room';
      case 'ruang_rapat': return 'Meeting Room';
      default: return room.classification.name.replace('_', ' ');
    }
  };

  // Cards background color
  const cardBg = useColorModeValue('white', 'gray.700');
  
  // Format date label based on rental type
  const getDateLabel = (isCheckIn) => {
    if (isDaily) {
      return isCheckIn ? 'Check-In Date' : 'Check-Out Date';
    } else {
      return isCheckIn ? 'Start Month' : 'End Month';
    }
  };
  
  if (loading) {
    return (
      <Box minH="100vh" display="flex" flexDirection="column">
        {!skipNavbar && <Navbar />}
        <Box flex="1" display="flex" alignItems="center" justifyContent="center">
          <VStack spacing={4}>
            <Spinner size="xl" thickness="4px" />
            <Text>Loading room details...</Text>
          </VStack>
        </Box>
        {!skipNavbar && <Footer />}
      </Box>
    );
  }
  
  if (error) {
    return (
      <Box minH="100vh" display="flex" flexDirection="column">
        {!skipNavbar && <Navbar />}
        <Container maxW="container.xl" py={10} flex="1">
          <Alert status="error" borderRadius="lg">
            <AlertIcon />
            <AlertTitle mr={2}>Error!</AlertTitle>
            <AlertDescription>{error}</AlertDescription>
          </Alert>
          <Button as="a" href="/rooms" mt={4} colorScheme="blue">
            Back to All Rooms
          </Button>
        </Container>
        {!skipNavbar && <Footer />}
      </Box>
    );
  }

  return (
    <Box minH="100vh" display="flex" flexDirection="column">
      {!skipNavbar && <Navbar />}
      <Box flex="1">
        <Container maxW="container.xl" py={8}>
          <Box mb={4}>
            <Button 
              as="a" 
              href="/rooms" 
              variant="outline" 
              size="sm" 
              leftIcon={<Icon as={FaArrowLeft} />}
            >
              Back to All Rooms
            </Button>
          </Box>
          
          <SimpleGrid columns={{ base: 1, lg: 3 }} spacing={8}>
            {/* Room Details */}
            <Box gridColumn={{ base: "1", lg: "1 / span 2" }}>
              <Box bg={cardBg} borderRadius="lg" overflow="hidden" boxShadow="md" mb={8}>
                <Flex direction={{ base: "column", md: "row" }}>
                  {/* Room Icon */}
                  <Box
                    w={{ base: "full", md: "40%" }}
                    h={{ base: "200px", md: "auto" }}
                    bg="gray.100"
                    display="flex"
                    alignItems="center"
                    justifyContent="center"
                  >
                    <Icon
                      as={getRoomIcon()}
                      boxSize="100px"
                      color={`${getBadgeColor()}.500`}
                    />
                  </Box>
                  
                  {/* Room Info */}
                  <Box p={6} flex="1">
                    <Flex justifyContent="space-between" alignItems="flex-start" mb={2}>
                      <Heading as="h1" size="xl">Room {room?.name}</Heading>
                      <Badge colorScheme={getBadgeColor()} px={2} py={1} fontSize="md">
                        {getRoomTypeName()}
                      </Badge>
                    </Flex>
                    
                    <Text fontSize="xl" fontWeight="bold" color="brand.600" mb={4}>
                      Rp {(room?.rate || 0).toLocaleString('id-ID')} / {isDaily ? 'day' : 'month'}
                    </Text>
                    
                    <Text mb={4}>{room?.description || 'No description available.'}</Text>
                    
                    <Divider my={4} />
                    
                    <SimpleGrid columns={{ base: 1, sm: 2 }} spacing={4}>
                      <Box>
                        <Text fontWeight="bold" mb={1}>Room Type:</Text>
                        <Text>{getRoomTypeName()}</Text>
                      </Box>
                      <Box>
                        <Text fontWeight="bold" mb={1}>Capacity:</Text>
                        <Text>{room?.capacity} {room?.capacity > 1 ? 'persons' : 'person'}</Text>
                      </Box>
                      <Box>
                        <Text fontWeight="bold" mb={1}>Rental Type:</Text>
                        <Text>{isDaily ? 'Daily' : 'Monthly'}</Text>
                      </Box>
                    </SimpleGrid>
                  </Box>
                </Flex>
              </Box>
              
              {/* Room Amenities */}
              <Box bg={cardBg} borderRadius="lg" p={6} boxShadow="md" mb={8}>
                <Heading as="h3" size="md" mb={4}>Room Amenities</Heading>
                
                {room?.amenities && room.amenities.length > 0 ? (
                  <SimpleGrid columns={{ base: 1, sm: 2, md: 3 }} spacing={4}>
                    {room.amenities.map((amenity, index) => (
                      <HStack key={index}>
                        <Icon 
                          as={getFeatureIcon(amenity.feature?.name)} 
                          color="green.500" 
                        />
                        <Text>
                          {amenity.feature?.description || amenity.feature?.name.replace('_', ' ')}
                          {amenity.quantity > 1 && ` (x${amenity.quantity})`}
                        </Text>
                      </HStack>
                    ))}
                  </SimpleGrid>
                ) : (
                  <Text color="gray.500">No specific amenities listed for this room.</Text>
                )}
              </Box>
              
              {/* Room Policies */}
              <Box bg={cardBg} borderRadius="lg" p={6} boxShadow="md">
                <Heading as="h3" size="md" mb={4}>Room Policies</Heading>
                
                <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
                  <Box>
                    <Heading as="h4" size="sm" mb={2}>Check-in/Check-out</Heading>
                    <List spacing={2}>
                      <ListItem>
                        <ListIcon as={FaCheckCircle} color="green.500" />
                        Check-in: 2:00 PM - 10:00 PM
                      </ListItem>
                      <ListItem>
                        <ListIcon as={FaCheckCircle} color="green.500" />
                        Check-out: Before 12:00 PM
                      </ListItem>
                      <ListItem>
                        <ListIcon as={FaCheckCircle} color="green.500" />
                        Early check-in/late check-out upon request
                      </ListItem>
                    </List>
                  </Box>
                  
                  <Box>
                    <Heading as="h4" size="sm" mb={2}>Rules</Heading>
                    <List spacing={2}>
                      <ListItem>
                        <ListIcon as={FaCheckCircle} color="green.500" />
                        No smoking
                      </ListItem>
                      <ListItem>
                        <ListIcon as={FaCheckCircle} color="green.500" />
                        No pets allowed
                      </ListItem>
                      <ListItem>
                        <ListIcon as={FaCheckCircle} color="green.500" />
                        Quiet hours: 10:00 PM - 7:00 AM
                      </ListItem>
                    </List>
                  </Box>
                </SimpleGrid>
              </Box>
            </Box>
            
            {/* Booking Form */}
            <Box>
              <Box 
                bg={cardBg}
                borderRadius="lg"
                p={6}
                boxShadow="md"
                position="sticky"
                top="100px"
              >
                <Heading as="h3" size="md" mb={4}>Book This Room</Heading>
                
                <form onSubmit={handleSubmit}>
                  <VStack spacing={4}>
                    <FormControl isRequired>
                      <FormLabel>{getDateLabel(true)}</FormLabel>
                      <Input
                        type="date"
                        value={checkIn}
                        onChange={handleCheckInChange}
                        min={minCheckIn}
                      />
                    </FormControl>
                    
                    <FormControl isRequired>
                      <FormLabel>{getDateLabel(false)}</FormLabel>
                      <Input
                        type="date"
                        value={checkOut}
                        onChange={(e) => setCheckOut(e.target.value)}
                        min={checkIn ? getNextDate() : minCheckIn}
                        disabled={!checkIn}
                      />
                    </FormControl>
                    
                    <FormControl>
                      <FormLabel>Number of Guests</FormLabel>
                      <Select 
                        value={guests}
                        onChange={(e) => setGuests(e.target.value)}
                      >
                        {[...Array(room?.capacity || 1)].map((_, i) => (
                          <option key={i + 1} value={i + 1}>
                            {i + 1} {i === 0 ? 'guest' : 'guests'}
                          </option>
                        ))}
                      </Select>
                    </FormControl>
                    
                    <FormControl>
                      <FormLabel>Special Requests (optional)</FormLabel>
                      <Textarea
                        value={notes}
                        onChange={(e) => setNotes(e.target.value)}
                        placeholder="Any special requests?"
                        rows={3}
                      />
                    </FormControl>
                    
                    {/* Price Summary */}
                    {(checkIn && checkOut && duration > 0) && (
                      <Box
                        w="full"
                        p={4}
                        borderWidth="1px"
                        borderRadius="md"
                        bg={useColorModeValue('gray.50', 'gray.700')}
                      >
                        <Heading as="h4" size="sm" mb={2}>Price Summary</Heading>
                        
                        <Flex justify="space-between" mb={2}>
                          <Text>Room Rate:</Text>
                          <Text>Rp {(room?.rate || 0).toLocaleString('id-ID')} / {isDaily ? 'day' : 'month'}</Text>
                        </Flex>
                        
                        <Flex justify="space-between" mb={2}>
                          <Text>Duration:</Text>
                          <Text>{duration} {isDaily 
                            ? (duration > 1 ? 'days' : 'day')
                            : (duration > 1 ? 'months' : 'month')
                          }</Text>
                        </Flex>
                        
                        <Divider my={2} />
                        
                        <Flex justify="space-between" fontWeight="bold">
                          <Text>Total:</Text>
                          <Text>Rp {totalPrice.toLocaleString('id-ID')}</Text>
                        </Flex>
                      </Box>
                    )}
                    
                    <Button
                      type="submit"
                      colorScheme="blue"
                      width="full"
                      size="lg"
                      isLoading={submitting}
                      loadingText="Submitting"
                      isDisabled={!checkIn || !checkOut || duration <= 0}
                    >
                      {isAuthenticated ? 'Book Now' : 'Sign In to Book'}
                    </Button>
                  </VStack>
                </form>
              </Box>
            </Box>
          </SimpleGrid>
        </Container>
      </Box>
      {!skipNavbar && <Footer />}
    </Box>
  );
}
